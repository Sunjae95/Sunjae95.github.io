[ { "title": "백준 - 토마토", "url": "/posts/7576/", "categories": "Algorithm, Baekjoon", "tags": "baekjoon, algorithm, bfs, graph", "date": "2022-04-17 00:00:00 +0900", "snippet": "토마토 - 7576번문제링크: 토마토🤔접근 방법익은 토마토와 익지 않은 토마토가 붙어있고 다음날이 된다면, 익지 않은 토마토는 익게 되는 것을 보고 점차 퍼지는 것이 머릿속에 그려졌다. 그래서 그래프 탐색과 연관 있다고 생각하게 됐다.최소 일수를 구하라는 지문을 보고 BFS를 생각하게 됐다. BFS 특성상 같은 deps의 노드를 탐색하기 때문에 이를 deps = 날짜라고 생각했다.기존 BFS는 첫 시작이 하나의 노드라면 여기서는 토마토가 1개 이상일 수도 있기 때문에 탐색 시 1개 이상의 노드를 넣어주어 BFS 알고리즘을 사용..." }, { "title": "백준 - Z", "url": "/posts/1074/", "categories": "Algorithm, Baekjoon", "tags": "baekjoon, algorithm, divide, conquer, recursion", "date": "2022-04-12 00:00:00 +0900", "snippet": "Z - 1074번문제링크: Z1074🤔접근 방법문제를 어떻게 풀어야 될지 몰라서 문제의 알고리즘 분류를 보고 힌트를 얻어 분할정복 알고리즘을 찾아봤다. 처음에는 어떻게 적용할까 고민했다.분할정복은 간단히 설명하면 탐색하고 싶은 구간을 일정 규칙에 의해 분할하고 더 이상 쪼갤 수 없다면 병합해주는 알고리즘이다. 이 문제는 분할정복이지만 내가 봤을 때는 병합보다는 분할에 초점을 두고 푸는게 이상적이라 생각한다.분할만 생각하게 된 계기 4등분을 할 수 있다. 수많은 것 중 한 개를 선택한다 = 더 이상 쪼갤 수 없다.🤗풀이 방법..." }, { "title": "백준 - 경비원", "url": "/posts/police/", "categories": "Algorithm, Baekjoon", "tags": "baekjoon, algorithm, implement", "date": "2022-04-11 00:00:00 +0900", "snippet": "경비원 - 2564번문제링크: 경비원2564🤔접근 방법문제에서 지도가 나와있듯이 처음에는 2차원 배열로 접근을 할지 숫자 계산(좌표)으로 접근할지 고민을 했다. 하지만 블록과 블록 사이를 지나가지 못한다는 지문을 보고 숫자 계산(좌표)으로 접근했다.어떤 기준을 가지고 계산을 해야 다양한 예시가 입력돼도 일정한 답을 도출할까를 고민했다. 이 문제를 풀 때 분기점을 나누는 방법을 생각하기까지 도움이 된 방법이다. 고정 위치(동근이)와 가변 위치(상점)의 방향을 어떻게 처리할 것인가? 항상 정해진 최솟값이 있는가?이 두 생각을 ..." }, { "title": "Closure에 대해서", "url": "/posts/closure/", "categories": "Frontend, JavaScript", "tags": "closure, javascript, study, deepdive", "date": "2022-04-04 00:00:00 +0900", "snippet": "🪂개요클로저란 개념은 알고는 있었지만 면접이나 다른사람에게 설명할 때 말을 못했던 경험이 많았기 때문에 나만의 언어로 글을 쓰고 정리해보고 싶어 이번 포스팅을 하게 됐다.🤔클로저란?자신의 렉시컬 스코프를 기억하는 반환된 함수이다.🤔렉시컬 스코프란?자바스크립트엔진이 함수를 어디서 정의했는지에 따라 상위 스코프를 결정하는것이다.// 렉시컬 스코프를 따른다는 예제 1const x = 1;function foo() { const x = 10; bar();}function bar() { console.log(x);}foo(); /..." }, { "title": "3주차 - 검색어 추천 구현", "url": "/posts/3w_2/", "categories": "원티드프리온보딩, Task", "tags": "wanted, wecode, frontend, next", "date": "2022-02-20 00:00:00 +0900", "snippet": "📃구현 CheckList!! 검색 시 버튼 생성 검색 시 연관된 글자 출력📖회고 내용🙋‍♂️소비자가 원하는 우선순위 정하기처음 검색창이라는 단어를 들었을 때 Trie자료구조 써서 해야겠다라는 생각이 들었다. Trie를 사용해서 검색어를 표출하는 것도 좋지만 검색창을 설계 시 우선순위가 높지 않다는 생각이 들어, 어떤 기준을 가지고 표출할지를 고민하게 됐다.첫 번째는 검색어 기준으로 우선순위 판단하기 모든 출력 순서는 사전순 검색어가 상품명과 브랜드명에 속할 때 검색어가 상품명에 속할 때 검색어가 브랜드명에 속할 때이..." }, { "title": "3주차 - 기프티콘 서비스 구현", "url": "/posts/3w_1/", "categories": "원티드프리온보딩, Task", "tags": "wanted, wecode, frontend, next, cypress", "date": "2022-02-16 00:00:00 +0900", "snippet": "📃구현 CheckList!! 홈페이지 브랜드 페이지 상품 리스트 페이지 상품 상세 페이지 고객 센터 페이지 페이지 이동 상품 옵션 선택 사이드바/ 고객센터 페이지     📖회고 내용SSR, CSR??이번 과제는 페이지가 많은 것이 특징이었고, 수업에서 NextJS를 배웠기 때문에 NextJS의 가장 큰 특징인 SSR, SSG, CSR방식이 모두 사용해 보고 싶었다. 이전 프..." }, { "title": "2주차 - 나는 리액트를 어떻게 설계할 것인가?", "url": "/posts/2w_3/", "categories": "원티드프리온보딩, Task", "tags": "wanted, wecode, frontend, react", "date": "2022-02-13 00:00:00 +0900", "snippet": "😎나만의 리액트 설계 방법├── index.tsx├── App.tsx├── components│   ├── atomic //가장 작은 단위 ex) 버튼, text, 수평선...│ │ └── Button│ │ ├── index.tsx //컴포넌트 함수│ │ ├── styled.(ts | css) //스타일│ │ └── types.ts //타입스크립트 적용 시 props에 대한 정의필요하므로 타입선언│   ├── molec..." }, { "title": "2주차 - 메신저 구현", "url": "/posts/2w_2/", "categories": "원티드프리온보딩, Task", "tags": "wanted, wecode, frontend, react, redux-toolkit, typescript, swit", "date": "2022-02-13 00:00:00 +0900", "snippet": "📃구현 CheckList!! 유저이름 입력 기능 메시지 입력 메시지 삭제 답글 달기 유저네임 입력/ 대화창 메시지 표시 메시지 입력 메시지 답장 메시지 삭제 📖회고 내용Swit으로 협업하기지금까지 3번의 과제를 진행하면서 가장 많이 했던 말이 우리 이제 뭐 남았죠?였다. 그래서 나는 팀원들과 협업을 위해 TodoList를 적용하자고 제안했다. TodoList의 장점은 우리가..." }, { "title": "2주차 - 대시보드 페이지 구현", "url": "/posts/2w_1/", "categories": "원티드프리온보딩, Task", "tags": "wanted, wecode, frontend, react, redux-toolkit, typescript, dashboard", "date": "2022-02-12 00:00:00 +0900", "snippet": "📃구현 CheckList!! 요청 내역 카드 불러오기 토글 필터링 체크박스 필터링 사이드바 슬라이드 카드 불러오기 토글 필터링 체크박스 필터링 사이드바 📖회고 내용리덕스 툴킷 적용이번 과제에서 팀원들과 전역 상태관리에 도전하기 위해 리덕스 툴킷을 사용했다. 리덕스 툴킷을 사용하기까지 많은 회의를 진행했다. 회의의 최종 고민은 리덕스를 사용하는 이유와 리덕스를 사용한다면 제한..." }, { "title": "1주차(개인) - 가구정보 조합 컴포넌트", "url": "/posts/1w_3/", "categories": "원티드프리온보딩, Task", "tags": "wanted, wecode, frontend, react, usememo, usecallback", "date": "2022-02-09 00:00:00 +0900", "snippet": "📃구현 CheckList!! 가구 정보가 있는 곳에 돋보기 모양의 버튼 표시 돋보기 버튼을 클릭하면 tool tip 출력 닫기 버튼을 클릭하면 tool tip 제거 tool tip 하나만 출력, 다른 가구 선택 시 다른 tool tip 출력 하단 상품목록 클릭 시 해당 tool tip 출력 입점되어있는 가구, 입점되지 않는 가구 출력📖회고 내용📊코딩할 때도 수학을 사용한다?!과제를 받아 관련 문서를 보니 가구 데이터 한 개당 위치에 해당한 x와 y의 값을 확인했다. 이 데이터를 어떻게 가공하여 아이콘과 툴팁을 올바르..." }, { "title": "1주차 - 공통컴포넌트,상품옵션 구현 회고", "url": "/posts/1w_2/", "categories": "원티드프리온보딩, Task", "tags": "wanted, frontend, react, hook, cleancode", "date": "2022-01-31 00:00:00 +0900", "snippet": "📃구현 CheckList!! 상품 옵션 세트를 추가, 삭제 기능 상품 옵션 세트 내 옵션 추가, 삭제 기능 옵션 내 추가옵션 추가, 삭제 기능 환율 바꾸기 기능 세금 적용📖과제 설명이번 과제는 페어프로그래밍하면서 하나의 컴포넌트를 개발하는 것이 아니라 각자 맡은 영역을 분배하여 구현하고 한 페이지에 각자 구현한 컴포넌트를 쌓는 과제였다. 팀원들과 공통된 컴포넌트를 나누고 나는 가장 기본적인 틀인 SettingFrame, SettingFrame안에 중복되는 SettingFrameItem를 맡았다.개인적인 구현사항은 상품..." }, { "title": "1주차 - 환율계산기", "url": "/posts/1w_1/", "categories": "원티드프리온보딩, Task", "tags": "wanted, frontend, react", "date": "2022-01-26 00:00:00 +0900", "snippet": "구현 내용1. 숫자만 입력 가능하고, 4자리 이상 입력 시 세자리씩 구분해주는 콤마(,)가 들어가는 Input 구현조건에 맞는 Input 타입을 구현하기 위해 세가지 방법을 고민했다.첫 번째, type=”number” 사용이 방법은 숫자만 입력하기라는 말을 들었을 때, 떠올랐던 생각이다. 하지만 type값을 주고 숫자만 입력할 수 있었지만 숫자 입력 후에 글자를 작성하면 Input에 포함되는 것을 발견했다. 또한 숫자만 가능하기에 콤마를 넣는다는 건 불가능했다.두 번째, value와 onChange 사용숫자만 받기가 어렵다고 ..." }, { "title": "VIF 리팩토링 회고", "url": "/posts/VIF_Refactoring/", "categories": "데브코스, Retrospective", "tags": "programmers, frontend, react, devcourse", "date": "2021-12-02 00:00:00 +0900", "snippet": "경험하고 싶은것 QA를 도입과 리팩토링 명단을 작성해보기 기능이 안되는 부분 정상작동 시키기 재사용가능한 부분을 재사용할 수 있게 만들기경험한 것문서화 도전모든 것을 기억하고 있으면 좋겠지만 사람은 망각의 동물, 문서화를 꼼꼼히 하지 않는다면 매번 복기하느랴 시간을 다쓰게 된다. 프로젝트를 진행하면서 이거 어떻게해야됐더라? 하고 자주 문서를 살펴보는 상황이 많았고 문서화의 중요성을 알게 됐다.이러한 경험을 통해 나는 문서화는 작업을 효율적으로 만들어주는 수단이라고 생각한다. 그래서 리팩토링을 효율적으로 하고 싶어 QA표를..." }, { "title": "DND 언택트 해커톤 회고", "url": "/posts/DND/", "categories": "데브코스, Retrospective", "tags": "programmers, frontend, react, javascript, devcourse", "date": "2021-11-22 00:00:00 +0900", "snippet": "해커톤에서 경험하고 싶은 것 제한 시간 내에 팀원들과 원활하게 의사소통하여 프로젝트의 목표를 설정하기 제한 시간 내에 목표에 가장 가까운 프로젝트를 완성(해커톤 완주) 해커톤에서 필요한 전략을 생각하고 팀원에게 도움주기 내가 직접 작성한 코드를 만들기해커톤에서 경험한 것사전준비해커톤 참여 여부가 확정되고 해커톤 진행하기 전 사전 준비가 필요하다고 생각했다. 한 번의 해커톤 경험이 있지만 그때는 프로젝트도 완성 못하고 끝난 경험이 있어 경험이 많은 동료와 멘토님께 해커톤의 조언을 얻고 싶었다. 팀장으로 해커톤을 많이 경험..." }, { "title": "Notion JS 리팩토링 회고", "url": "/posts/Notion_Refactor/", "categories": "데브코스, Retrospective", "tags": "programmers, frontend, javascript, devcourse", "date": "2021-11-13 00:00:00 +0900", "snippet": "⏳기간: 2021/11/08 ~ 2021/11/12🏔목표 정해진 기간에만 리팩토링 하기 컴포넌트의 책임에 대해 고민해보기 document 생성을 하면 sidebar와 editor가 새롭게 생성 되어야 한다. document 삭제기능 새로고침시 정보를 받아올수 없다는 창 나오지 않게 하기 토글버튼 editor 수정시 디바운스 되며, 로딩중이라고 사용자에게 보여주기 사용성 개선(포인터, hover효과)프로젝트 구조App컴포넌트기존 프로젝트의 문제는 url이 &#39;/&#39; 아닌 곳에서 새로 고침을 하게 되면 현..." }, { "title": "Programmers - 멀쩡한 사각형", "url": "/posts/square/", "categories": "Algorithm, programmers", "tags": "programmers, math, algorithm", "date": "2021-11-09 00:00:00 +0900", "snippet": "코딩테스트 연습 - 멀쩡한 사각형풀이 접근 각 예시 그림을 그려가며 풀이해보았다.3X2, 4X2, 5X2, 6X2,4X3, 5X3, 6X3, 7X3높이를 고정하고 너비만 늘려가며 계산해보았음높이가 2와 3일 때는 규칙성이 보였다. 4는 2와 연관되어있다고 생각해서 규칙이 보였다.문제는 5일때 내가 생각하던 규칙과 관련이 없기에 이 접근법은 아니라고 포기함 짝수와 홀수의 관계라고 생각하고 풀어보았다.너비와 높이가짝수X짝수 ⇒ 규칙이 보임 직사각형으로 쪼개지는것을 발견홀수X홀수 ⇒ 가운데 사각형의 정중앙을 통..." }, { "title": "VIF 프로젝트 KPT 회고", "url": "/posts/VIF_project_KPT/", "categories": "데브코스, Retrospective", "tags": "programmers, frontend, devcourse, react", "date": "2021-11-04 00:00:00 +0900", "snippet": "Keep 지금까지 웹프로젝트를 했을 때 완성하지 못했지만 이번에는 프로젝트 완성 해봤다. 컴포넌트를 가장 작은 단위까지 쪼개려는 생각 라이브러리를 활용해서 타임스탬프를 기능 구현Problem 시간이 촉박해서 생각없이 코드를 짜는 점 / 완성도는 나왔지만 기능적으로는 괜찮나?라는 생각이 든다. 프로젝트에서 새로운것을 도전하기 보다는 기존에 사용했던 것을 이어 붙이려고만 하는 방식Try 시간이 촉박한거는 아직 미숙하기 때문에 부족하다고 생각한다. 그래서 시간적인 측면은 많은 경험을 쌓다보면 해결될것이라 생각하고 많은 프..." }, { "title": "TIL 28일차 - 타입스크립트", "url": "/posts/TIL_28/", "categories": "데브코스, TIL", "tags": "programmers, frontend, devcourse, typescript", "date": "2021-11-04 00:00:00 +0900", "snippet": "타입스크립트장점 타입이 있다 안정성 - 컴파일 단계에서 미리 오류를 감지할 수 있다. 가독성 - 타입을 보고 무엇을 하는지 미리 알 수 있다. 단점 초기 설정을 있어 힘들수 있다. 스크립트 언어의 유연성이 낮아진다. 컴파일 시간이 길어질 수 있다. 프로젝트의 크기가 커질수록 더 길어진다..!타입주석 변수 뒤에 :type을 붙여주어 자바스크립트에 없는 타입을 명시해줌 타입이 정해져 있기 때문에 엄격함 반환해줄 수는 있지만 컴파일에서 걸리게 된다. string, number, obj..." }, { "title": "밀렸던 TIL", "url": "/posts/TIL_27/", "categories": "데브코스, TIL", "tags": "programmers, frontend, devcourse, vue", "date": "2021-11-04 00:00:00 +0900", "snippet": "Ref 원하는 요소를 선택할 때 사용함 요소에 id나 class를 일일이 추가하기 어려우니 Ref사용 mounted시점부터 사용가능하다. 요소 자체를 확인하기 때문에 querySelector같이 모든 요소를 검색하는 API보다 많이 사용 l플러그인 install이란 함수를 가진 객체를 반환해주는 JS 파일을 만들어 사용한다. app.config.globalProperties 에 자신이 원하는 $이름의 함수를 만들어 재사용하면 된다. 그러면 plugin을 달아주면 this키워드를 사용해서 이용가능하다.믹스인 재사용 가..." }, { "title": "TIL 26일차", "url": "/posts/TIL_26/", "categories": "데브코스, TIL", "tags": "programmers, frontend, devcourse, vue", "date": "2021-10-05 00:00:00 +0900", "snippet": "Props단방향 데이터 흐름 부모 속성이 업데이트 되면 자식으로 데이터의 업데이트가 흐름. 반대방향 X 하위컴포넌트에서 실수로 앱데이터 흐름을 이해하기 힘들게 만드는 상위 컴포넌트 상태 변경을 방지할 수 있는 장점 Vue에서 하위컴포넌트에서 Prop을 변경하려면 경고가 나옴 Prop를 변환하려면 새로운 변수에 할당해서 사용하거나 computed를 사용해서 정의하는것을 권장 객체 Props를 넘기면 v-bind 디렉티브를 사용해서 넘긴다. props를 받을 때 타입을 구분 지어준다.//Exprops: { id: { ..." }, { "title": "TIL 25일차", "url": "/posts/TIL_25/", "categories": "데브코스, TIL", "tags": "programmers, frontend, devcourse, vue, webpack, eslint", "date": "2021-10-04 00:00:00 +0900", "snippet": "컴포넌트 전역등록과 지역등록 방법이 있는데 지역등록을 하는것을 더 선호한다. props는 읽기 전용이기 때문에 컴포넌트내에서 데이터를 변경하려고 시도하면 경고가 난다. 그래서 props데이터가 바뀐다고 상위 컴포넌트에 요청을 해야된다. 상위 컴포넌트에서 데이터를 내려주는것은 props, 하위 컴포넌트에서 데이터를 올려줄 때는 $emit을 사용함Webpack Webpack을 통해 파일을 번들(하나로 만들어줌)할 수 있다. Webpack은 JS에 대해서만 가능하기 때문에 CSS, SASS와 같은 다른 확장자를 가진 파일은..." }, { "title": "TIL 24일차", "url": "/posts/TIL_24/", "categories": "데브코스, TIL", "tags": "programmers, frontend, devcourse, vue", "date": "2021-10-04 00:00:00 +0900", "snippet": "createApp Option data(), computed()는 인자로 사용 method()는 함수로 사용 Vue에서 CSS를 지정하기 위해 Camel Case도 반영이 가능하다. ex) background-color ⇒ backgroundColor 여러개의 스타일 객체를 추가하려면 배열로 묶어서 추가해주기 CSS에서 더 나중에 쓰여진 속성이 덮어쓰게 된다.computed 캐싱되기 때문에 만들어진 결과를 저장해서 반복하는 계산이 많을 때 줄여주는 기능을 한다. 현재 자신이 의존하는 데이터가 바뀔 때만 동작한다. ..." }, { "title": "TIL 23일차", "url": "/posts/TIL_23/", "categories": "데브코스, TIL", "tags": "programmers, frontend, devcourse, vue", "date": "2021-09-29 00:00:00 +0900", "snippet": "Vue JS 입문 Vue는 프레임워크이다. CDN, npm을 이용해서 설치할 수 있다. 선언적 렌더링이 가능하다. 디렉티브(v-bind 속성 및 접두어는 v-@@@으로 시작)를 활용한다.라이프 사이클created: Vue data와 연관mounted: HTML 요소랑 연관템플릿 문법Mustache: 데이터 바인딩의 가장 기본 형태 (이중 중괄호)속성: Mustache구문은 HTML 속성으로 사용할 수 없으니 v-bind 디렉티브를 사용해서 문자열로 사용가능하다.느낀점강의가 많이 밀리고 Vue를 하나하나 뜯어보고 싶지만 ..." }, { "title": "7주차 회고", "url": "/posts/week7/", "categories": "데브코스, Retrospective", "tags": "programmers, frontend, devcourse, css, sass, scss", "date": "2021-09-28 00:00:00 +0900", "snippet": "7주차 나의 목표 팀원들 코드리뷰하기 밀린 공부하기 TIL 짧게 요약하여 쓰기7주차 나의 모습은?두려웠던 CSS에 맞서다!프론트엔드 공부를 하면서 CSS사용을 많이 못했다. 그래서 나는 이번 주차에 CSS학습이 많이 걱정됐다. 혹시 못따라가면 어떡하지? 고민을 많이 했지만 다행히도 강의를 어떻게든 따라잡고 과제로 웹사이트 두개를 만들어 제출했다.JS 강의 밀린건 유감포기하고 싶어도 끝까지추석방학 7일 동안 아침 유튜브, 오후 노션, 저녁 꼬리 홈페이지 클론코딩으로 빡빡하게 시간표를 짰다. 하지만 결과는 노션 조금, 유튜브..." }, { "title": "TIL 22일차", "url": "/posts/TIL_22/", "categories": "데브코스, TIL", "tags": "programmers, frontend, devcourse, scss", "date": "2021-09-19 00:00:00 +0900", "snippet": "😎자주 쓰게 될 내장 함수색상 명도 어둡게 하기darken(색깔, 얼만큼) 색깔을 얼마나 어둡게 할 것인가?color.adjust(색깔, $lightness: 얼마나) 내장 함수를 사용해서 색깔을 얼마나 어둡게 할 것인가?보통 hover효과와 함께 쓸 것임 명도 밝게 하기lighten(색깔, 얼만큼) 색깔을 얼마나 밝게 할 것인가?color.adjust(색깔, $lightness: 얼마나) 내장 함수를 사용해서 색깔을 얼마나 밝게 할 것인가?보통 hover효과와 함께 쓸 것임 채도 높이기: saturate(색상, %) /..." }, { "title": "TIL 21일차", "url": "/posts/TIL_21/", "categories": "데브코스, TIL", "tags": "programmers, frontend, devcourse, scss", "date": "2021-09-18 00:00:00 +0900", "snippet": "조건 @if 조건문 Sass에서는 if를 사용할 때 @를 붙인다. if else 문도 @else if 로 사용하며 if에는 @붙이지 않게 주의한다.반복 @each 변수 in (List, Map가능) 자바스크립트의 for of나 forEach문과 비슷하다. Map은 key와 value로 할당 후 사용가능하다. @for 변수 from 시작점 through 끝점 조건부분은 from … through 주의할 것! @while (조건문) @말고 JS와 다른점은 없음@import 파일을 가져와서 사용하는 개념 import로 ..." }, { "title": "TIL 20일차", "url": "/posts/TIL_20/", "categories": "데브코스, TIL", "tags": "programmers, frontend, devcourse, scss", "date": "2021-09-17 00:00:00 +0900", "snippet": "재활용Scss@mixin large-text($size: 30px) { // @if($size &amp;lt; 30px) { // font-size: 30px; // } // @else{ // font-size: $size; // } //condition ? true : false font-size: if($size &amp;lt; 30px, 30px, $size); font-weight: bold; font-family: sans-serif;..." }, { "title": "TIL 19일차", "url": "/posts/TIL_19/", "categories": "데브코스, TIL", "tags": "programmers, frontend, devcourse, css, sass", "date": "2021-09-17 00:00:00 +0900", "snippet": "Grid명시적: grid-template-rows, grid-template-columns암시적: grid-auto-rows, grid-auto-columnsGrid container repeat: 반복하기 위한 함수 minmax: 현재 최소값과 최대값을 설정할 수 있다. fit-content: 너비를 제한 할 수 있다.Grid에서 사용할 수 있는 단위 fr: 사용가능한 공간 너비 비율 min-content: grid item의 최소 너비 값 / 만약 한글을 사용한다면 word-break: keep-all을 사용하면 ..." }, { "title": "TIL 18일차", "url": "/posts/TIL_18/", "categories": "데브코스, TIL", "tags": "programmers, frontend, devcourse, javascript, type", "date": "2021-09-14 00:00:00 +0900", "snippet": "Type Check과제 요구사항 중 state의 정합성을 확인하는 요구사항이 있었다. 그래서 나는 정합성 확인을 state의 모든 인자들의 Type이 맞는지 확인을 했다.const BOOLEAN = &quot;Boolean&quot;;const ARRAY = &quot;Array&quot;;const NULL = &quot;Null&quot;;export const validation = (variable, type) =&amp;gt; { switch (type) { case BOOLEAN: { if (type..." }, { "title": "6주차 회고", "url": "/posts/week6/", "categories": "데브코스, Retrospective", "tags": "programmers, frontend, devcourse", "date": "2021-09-12 00:00:00 +0900", "snippet": "6주차 나의 목표 팀원들 코드리뷰하기 밀린 공부 하기 TIL 짧게 요약하여 쓰기6주차 나의 모습은? 생각하기..노션클로닝 프로젝트를 제출하고 구현하는데 어려웠던 점, 개선해야되는 점을 조사하려고 팀원과 대화, 멘토링을 통한 질문, 강사님의 세션에 시간을 썼다. 그 결과 내가 설계한 대로 구현해도 됐지만 요구사항에 맞춰 구현하는 것은 App에서 data를 관리하는 것이 더 좋아보였다. 프로젝트에서 정답은 없지만 효율성있게 할 수 있음의 중요성을 알게 됐다. 요구사항을 충족하는 프로젝트를 구현하지 못했지만 설계를 여러번하면서..." }, { "title": "TIL 17일차", "url": "/posts/TIL_17/", "categories": "데브코스, TIL", "tags": "programmers, frontend, devcourse, javascript, string", "date": "2021-09-08 00:00:00 +0900", "snippet": "무한 스크롤구현방식 window의 scroll이벤트를 통해 스크롤링이 일어날 때마다 스크롤 위치가 화면 끝인지 확인하여 컨텐츠를 불러오는 방식 intersection observer 방식구현 순서 DUMMY_DATA를 사용해서 5장의 사진을 불러오기 API를 연동해서 5장의 사진을 불러오기 불러오기 버튼을 만들어 사진을 불러오는 기능 구현하기 처음에는 다른 페이지에 있는 사진들 불러오기 현재 있는 사진에 다른 페이지에 있는 사진 이어 붙이기 버튼 대신 스크롤바이벤트는 만들어 사진을..." }, { "title": "TIL 16일차", "url": "/posts/TIL_16/", "categories": "데브코스, TIL", "tags": "programmers, frontend, devcourse, css", "date": "2021-09-07 00:00:00 +0900", "snippet": "Flex1차원 구조를 수직, 수평 정렬을 하기 위해 사용하는 속성display, direction, flex-wrap, justify-content(주축), align-items(교차축) 속성을 배움GridFlex와 비슷하지만 Grid는 2차원 레이아웃 구조를 다루기 위한 속성grid-containercell 내부 속성 justify-items, align-items속성이 있다. 하나의 cell안에 하나의 item이기 때문에 지정가능 space는 불가grid-template-areasgrid-area로 정의 선언 후 선언한 s..." }, { "title": "TIL 15일차", "url": "/posts/TIL_15/", "categories": "데브코스, TIL", "tags": "programmers, frontend, devcourse, css", "date": "2021-09-06 00:00:00 +0900", "snippet": "float현재는 1차원 수평 정렬로 Flex를 많이 사용하지만 예전에는 float속성을 많이 사용했기 때문에 예전에 만들어진 프로젝트를 진행하면 float를 만날 수 있기 때문에 알아야된다. 또한 float를 사용한다면 몇 요소들은 display속성이 block으로 변한다.clearfix 활용float 자식 요소들을 담고 있는 컨테이너가 온전하게 사용되려면 가상요소선택자 after를 활용해서 both로 float를 모두 제거해야된다. 주의할 점 float로 선언된 요소들끼리만 묶어야 된다..clearfix::after{ co..." }, { "title": "5주차 회고", "url": "/posts/week5/", "categories": "데브코스, Retrospective", "tags": "programmers, frontend, devcourse", "date": "2021-09-05 00:00:00 +0900", "snippet": "5주차 나의 목표 노션 클론 프로젝트 운동하기(턱걸이 바 사서 해보까..?) 팀원들의 코드 리뷰하기(다양한 사람들의 코드를 보며 배워보자!) 프로그래머스 웹 데브매칭(이번주에 공부한 내용을 한번 써보자!)5주차 나의 모습은? 졌지만 잘 싸웠다…이번 주는 노션프로젝트로 일주일을 가득 채웠다. 분명 나에게 주어진 시간은 10일이었는데 시작은 4일차부터 시작하게 됐다. 왜냐하면 바닐라JS로 구현하는 것이 어려워서 밀린 강의를 수강하고 시작한 것이 시간이 부족한 이유였던 것이다. 프로젝트를 하면서 내가 예상하는 상황을 구현해보..." }, { "title": "TIL 14일차", "url": "/posts/TIL_14/", "categories": "데브코스, TIL", "tags": "programmers, frontend, devcourse", "date": "2021-09-01 00:00:00 +0900", "snippet": "InnerHTML🕶선입견프로젝트를 하면서 InnerHTML를 사용하여 구현했다. 나는 InnerHTML이 하면 보안에 취약하다고 알고 있었기 때문에 좋아하는 방법은 아니었다. 하지만 InnerHTML을 쓰게 된 이유는 프로젝트를 하면서 아직 나에게 맞는 방법을 찾지 못했고 강사님이 알려주신 것을 활용해보고 싶었기 때문에 InnerHTML을 사용하게 됐다. 나중에는 class를 활용해서 구현해보고 싶다.🗺나의 상황또한 InnerHTML은 리터럴 문자로 넣는 방식이 하드코딩 같다 생각해 내가 좋아하는 방식이 아니었다. 가독성도 제..." }, { "title": "4주차 회고", "url": "/posts/week4/", "categories": "데브코스, Retrospective", "tags": "programmers, frontend, devcourse", "date": "2021-08-30 00:00:00 +0900", "snippet": "4주차 나의 목표 매주 하나의 주제에 대해 아티클 작성(아티클 작성 시 거의 하루 종일 작성하기 때문) 생활 습관 개선 (8시기상 → 1시 취침 7시간은 자야 내가 활동을 잘하는 거 같다.) 운동하기(점심 먹기 전 홈트 및 산책등..)4주차 나의 모습은? 적응? 진화중..?3주차와 똑같은 생각이지만 더 정리해보고 싶어 적응이라는 제목을 붙이고 글을 쓴다.이제 1주차 알고리즘, 2주차 함수형 프로그래밍, 3주차 바닐라 JS 수업을 수강하고 공부하면서 적응하게 됐다. 처음에는 매일 TIL 쓰기, 강의 꽉꽉 채워서 듣기, 안되..." }, { "title": "TIL 13일차", "url": "/posts/TIL_13/", "categories": "데브코스, TIL", "tags": "programmers, frontend, devcourse", "date": "2021-08-27 00:00:00 +0900", "snippet": "SPA일반적인 정적인 웹페이지 HTML 파일들로 페이지가 구성 url이 파일 경로와 이름이 됨 url상 파일명이 없을 경우 index.html을 찾으려함SPA가 나오게 된 배경 정적인 파일을 웹 서버로 제공하는 방식뿐만 아니라 PHP, Java, Node.js등 을 이용해 동적으로 HTML을 생성해서 제공하는 방식 HTML을 서버에서 만들어 내려주고, 이후 동작을 JS를 통해 하다보니 렌더링 시점이 뒤죽박죽이 되는 문제가 발생하게 된다. 그러다보니 서버 렌더링 시점에서 구현했던 것을 클라이언트에서 동적으로 렌더링 해..." }, { "title": "Execution Context(실행 컨텍스트)", "url": "/posts/ExecutionContext/", "categories": "Frontend, JavaScript", "tags": "excutioncontext, frontend, study, javascript", "date": "2021-08-24 00:00:00 +0900", "snippet": "Execution Context(실행 컨텍스트)란?ECMAScript 스펙에 따르면 실행 가능한 코드를 형상화하고 구분하는 추상적인 개념다시 말해 코드에 선언된 변수와 함수, 스코프 등의 정보들을 모아 놓은 객체 또는 환경이라고 생각하면 된다. 실행 컨텍스트는 동일한 환경(스코프)에 있는 코드를 실행할 때 필요한 환경 정보들을 모아 하나의 컨텍스트로 구성하고, 이를 Call Stack(JS엔진의 콜스택) 안에 쌓아 올려 push하여 실행하거나 종료가 되면 pop을 한다.실행 컨텍스트 종류1. Global Execution Co..." }, { "title": "TIL 12일차", "url": "/posts/TIL_12/", "categories": "데브코스, TIL", "tags": "programmers, frontend, devcourse", "date": "2021-08-23 00:00:00 +0900", "snippet": "Importexport 키워드로 내보진 변수, 함수 등등을 불러올 수 있는 키워드사용법 import defaultExport from ‘module-name’; module-name 내에 export default로 내보내진 것을 가져온다. 컴포넌트는 이 규칙을 활용하는 경우가 많다 import * as allItems from ‘module-name’; module-name 내에서 export 된 모든 것을 모두 가져온다. as 이후 이름은 중복되지 않으면 자유롭게 정..." }, { "title": "3주차 회고", "url": "/posts/week3/", "categories": "데브코스, Retrospective", "tags": "programmers, frontend, devcourse", "date": "2021-08-20 00:00:00 +0900", "snippet": "3주차 나의 목표 아티클 작성해보기 CS스터디 꼼꼼히 해보기 하루에 해야 할 강의 밀리지 않기 운동하기3주차 나의 모습은?열정에서 살려줘~😥오늘은 데브코스 3주 차의 금요일이다. 오늘이 수요일일 줄 알았는데 이렇게 빨리 금요일이 될 줄 몰랐다. 아직 이번 주에 해야 될 것이 많은데 해야될 것들이 산더미처럼 쌓인 느낌이다. 처음 데브코스를 시작할 때는 시켜만 줘 다 소화할 수 있어, 나 열정적인 사람이니깐 시켜만 줘‘였는데 지금은 왜 이렇게 많지 조금만 줄여주면 안 돼?😥처럼 나약한 생각이 들기도 했다.나의 작업 방식은?..." }, { "title": "TIL 10일차", "url": "/posts/TIL11/", "categories": "데브코스, TIL", "tags": "programmers, frontend, devcourse", "date": "2021-08-19 00:00:00 +0900", "snippet": "명령형 프로그래밍(Imperative)const $button1 = document.createElement(&quot;button&quot;);const $button2 = document.createElement(&quot;button&quot;);const $button3 = document.createElement(&quot;button&quot;);$button1.textContent = &quot;Button1&quot;;$button2.textContent = &quot;Button2&quot;;$button3.t..." }, { "title": "This", "url": "/posts/This/", "categories": "Frontend, JavaScript", "tags": "programmers, frontend, devcourse, javascript, this", "date": "2021-08-18 00:00:00 +0900", "snippet": "개요자바스크립트를 사용하면서 정확히는 모르지만 예측하며 사용했던 this에 대해 호기심이 생겨 공부하고 싶었다. 자바스크립트에서 This는 다른 언어의 this와는 다르다. 다른 특성 때문에 내가 정확히 사용을 못하지만, 예측은 가능하게 됐다고 생각한다. (참으로 아이러니 하다..)😅이번 글을 통해 this를 이해할 수 있는 글을 써 보는 것이 목표이다.This?자바스크립트에서 This란 함수 호출 시 어떻게 호출되었는지에 따라 this에 바인딩할 객체가 동적으로 결정되는 것을 말한다.전역 실행 컨텍스트에서 Thisthis는 ..." }, { "title": "TIL 10일차", "url": "/posts/TIL_10/", "categories": "데브코스, TIL", "tags": "programmers, frontend, devcourse", "date": "2021-08-17 00:00:00 +0900", "snippet": "함수형 프로그래밍으로 생각하기오늘 학습한 내용은 함수형 프로그래밍을 실전에서 응용이다. 오늘 학습을 통해 나는 명령형 프로그래밍을 선언형프로그래밍(함수형 프로그래밍)으로 바꾸는 것을 계속 연습을 했다.명령형 프로그래밍을 선언형 프로그래밍으로 만들기 위한 생각 길잡이(‼모든 상황에 해당하는 건 아님!) if의 조건문은 filter함수를 통해 제어해준다. 값을 변화 시킨 후 변수를 할당한다면 map함수를 통해 값을 변형 시켜준다. for, while문에서 어느 시점에서 break를 한다면 take 함수를 통해 멈춰준다. 축..." }, { "title": "TIL 9일차", "url": "/posts/TIL_9/", "categories": "데브코스, TIL", "tags": "programmers, frontend, devcourse", "date": "2021-08-15 00:00:00 +0900", "snippet": "Promisepromise는 대기, 성공, 실패를 담고 있는 일급값으로 이루어져 있다. 대기된 값을 만드는 것이 콜백 함수와 가장 큰 차이점이다.function add10(a, callback) { setTimeout(() =&amp;gt; callback(a + 10), 100);}const a = add10(5, (res) =&amp;gt; { add10(res, (res) =&amp;gt; { add10(res, (res) =&amp;gt; { console.log(res); // 1초후 35 })..." }, { "title": "TIL 8일차", "url": "/posts/TIL_8/", "categories": "데브코스, TIL", "tags": "programmers, frontend, devcourse", "date": "2021-08-11 00:00:00 +0900", "snippet": "코드를 값으로 다루어 표현력 높이기이번 학습에서 코드를 값으로 다루어 표현력 높이기라는 주제로 강의를 들었다. 이번 강의를 듣고 코드를 작성할 때 함수를 어떻게 작성하느냐에 따라 로직이 읽히는 코드가 될 수 있고 아닐 수 있다는 것을 알게 됐다. 그 중 go, curry, pipe라는 개념을 알게 됐다.go함수들과 인자들을 한번에 받아 즉시 평가하는데 사용한다.pipe함수들이 나열되어 있는 합성된 함수를 만드는데 사용한다. 내부에서 go함수를 사용하는 방식이다. 묶어주는 역할..?curry함수를 값으로 다루면서 받아둔 함수를 ..." }, { "title": "TIL 7일차", "url": "/posts/TIL_7/", "categories": "데브코스, TIL", "tags": "programmers, frontend, devcourse", "date": "2021-08-10 00:00:00 +0900", "snippet": "순회//ES6 이전//구체적으로 명령적으로 기술for (var i = 0; i &amp;lt; list.length; i++) { console.log(list[i]);}//ES6 이후//이전보다 더욱 선언적이고 간결하게 됐다for (const a of list) { console.log(a);}Array, Set, Map 공통점 차이점 공통점이터러블 프로토콜을 따르고 있기 때문에 for…of문을 활용할 수 있다. 차이점Array는 key로 찾을 수 있지만 Set과 Map은 그렇게 못함 하지만 for of문은 작동을 하..." }, { "title": "TIL 6일차", "url": "/posts/TIL_6/", "categories": "데브코스, TIL", "tags": "programmers, frontend, devcourse", "date": "2021-08-10 00:00:00 +0900", "snippet": "HTML(Hyper Text Markup Language) 웹브라우저가 등장하면서 웹문서를 표현하기 위한 언어 로직이 실행이 안되고 계산이 안되기 때문에 프로그래밍 언어라고 할 수없다. HTML은 워드 문서와 같다.(워드문서는 XML HTML은 친척정도?) 문서의 의미와 전체구조를 담당한다. HTML5 영상과 음성을 처리하기 위한 멀티미디어 요소가 추가됐다. 구조적인 요소가 추가됐다. 표현을 담당하던 태그가 삭제되고 의미를 담은 태그가 추가되었다. 주의할 점 ..." }, { "title": "TIL 5일차", "url": "/posts/TIL_5/", "categories": "데브코스, TIL", "tags": "programmers, frontend, devcourse", "date": "2021-08-06 00:00:00 +0900", "snippet": "힙힙은 우선순위큐를 구현하기 가장 적합한 자료구조이다.이진트리 형태를 가지며 우선순위가 높은 요소가 먼저 나가기 위해 요소가 삽입, 삭제 될 때 바로 정렬되는 특징이 있다.우선순위 큐: FIFO 큐와 달리 우선순위가 높은 요소가 먼저 나가는 큐(자료구조가 아닌 개념이다!)우선순위큐≠ 힙특징 우선순위가 높은 요소가 먼저 나가는 특징 루트가 가장 큰값이 되는 최대 힙과 루트가 가장 작은 값이 되는 최소 힙이있다. 최대, 최소를 찾을 때는 O(1) 시간 복잡도를 가진다 자바스크립트는 힙을 직접 구현해야된다.힙 추가 알고리즘 ..." }, { "title": "TIL 4일차", "url": "/posts/TIL_4/", "categories": "데브코스, TIL", "tags": "programmers, frontend, devcourse", "date": "2021-08-05 00:00:00 +0900", "snippet": "트리방향 그래프의 일종으로 정점을 가리키는 간선이 하나 밖에 없는 구조를 가지고 있다.ex) 사내 조직도, 소프트웨어에서는 디렉토리 구조용어 Node: 각 정점 Root: 최상단 노드 Leaf Node: 더 이상 자식이 없는 노드 Level: Root로 부터 몇 번째 깊이인지 표현 Degree: 한 정점에서 뻗어져 나가는 간선의 개수(차수라고도 함)특징 루트 정점을 제외한 모든 정점은 반드시 하나의 부모정점을 가진다. 정점이 N개인 트리는 반드시 N-1개의 간선을 가진다. 루트에서 특정 정점으로 가는 경로는 유일..." }, { "title": "TIL 3일차", "url": "/posts/TIL_3/", "categories": "데브코스, TIL", "tags": "programmers, frontend, devcourse", "date": "2021-08-04 00:00:00 +0900", "snippet": "배열(순차 리스트)연관된 데이터를 연속적인 형태로 구성된 구조를 가지며, 배열에 포함된 원소는 순서대로 번호(index)가 붙는다. index를 활용해서 꺼내 쓰거나 새로운 데이터를 넣을 수 있다.특징 고정된 크기를 가지며 일반적으론 동적으로 크기를 늘릴 수 없다.(C일 경우) 하지만 스크립트언어(javascript, python)는 동적으로 크기가 증감되도록 만들어져 있다. 원하는 원소의 index를 알고 있다면 O(1)로 원소를 찾을 수 있다. 원소를 삭제하면 해당 index에 빈자리가 생긴다. 추가와 삭제 시 중간..." }, { "title": "TIL 2일차", "url": "/posts/TIL_2/", "categories": "데브코스, TIL", "tags": "programmers, frontend, devcourse", "date": "2021-08-03 00:00:00 +0900", "snippet": "🎨함수형 프로그래밍프로그래밍 패러다임프로그래머에게 프로그래밍의 관점을 갖게 하고 코드를 어떻게 작성할 지 결정하는 역할을 한다. 무엇을 해야 할지를 말하기 보다 무엇을 해서는 안되는지 말해준다 라고 생각 할 수 있다.명령형 프로그래밍 - 문제를 어떻게 해결해야 하는지 컴퓨터에게 명령을 내리는 방법선언형 프로그래밍 - 무엇을 해결해야 할지에 집중하고 해결방법은 컴퓨터에게 위임하는 방법 (함수형 패러다임 객체지향은 추상화의 최소 단위가 객체인 것처럼 함수형은 함수가 최소 단위이다. 객체지향보다 더 작은 단위로 나눠지므로 재사용성..." }, { "title": "TIL 1일차", "url": "/posts/TIL_1/", "categories": "데브코스, TIL", "tags": "programmers, frontend, devcourse", "date": "2021-08-02 00:00:00 +0900", "snippet": "💻브라우저의 동작 원리(얕은 개념)통신: 브라우저가 서버에 요청을 하면 서버는 요청에 따라 특정값을 응답해준다. 요청은 한번에 하나씩 or 동시에 가능도 하다.렌더링: DOM이란 객체를 브라우저에 그려주는 과정이다. DOM은 통신을 통해 받은 HTML을 브라우저에서 생성해준다. 또한 DOM은 트리구조를 가지고 있어서 요소가 부모 자식 관계로 이루어졌다.스크립트 실행: 브라우저가 스크립트 탭을 통해 스크립트 파일을 읽으면 바로 실행이 된다. 이를 통해 UI를 변경하거나 동적인 화면을 구성할 수 있다.📗변수일반적으로 수학에서는 변..." }, { "title": "데브코스 프론트엔드 1기 합격 후기", "url": "/posts/dev/", "categories": "데브코스, Retrospective", "tags": "programmers, frontend, devcourse", "date": "2021-07-31 00:00:00 +0900", "snippet": "데브코스를 선택하게 된 계기저는 학교를 다니면서 VR, 모바일 관련한 프로젝트를 하면서 사용자와 상호작용하고 즉각적인 피드백을 받는다는 프론트엔드 분야에 관심을 많이 가지게 됐어요. 사용자와 함께😊졸업 후 프론트엔드 플랫폼 중 모바일과 웹을 고민했을 때 웹이 장점이 많아 관심을 가지게 됐습니다. 다양한 기기에서 접근이 가능하고 어디서든 사용이 가능한 점..?여러분은 어떻게 생각하시나요..❓프로젝트 경험도 있고(여러 프레임워크 사용) 어느정도 기본 문법만 익히면 프론트엔드 개발로 취직이 될 것이라 어리석은 생각을 하고, 6개월간..." }, { "title": "1504 특정한 최단 경로", "url": "/posts/1504/", "categories": "Algorithm, Baekjoon", "tags": "baekjoon, heap, dijkstra", "date": "2021-07-30 00:26:00 +0900", "snippet": "문제 링크: 1504번: 특정한 최단 경로나의 풀이const fs = require(&quot;fs&quot;);const inputs = fs.readFileSync(&quot;input&quot;).toString().split(&quot;\\r\\n&quot;);const [N, M] = inputs[0].split(&quot; &quot;).map((value) =&amp;gt; parseInt(value));const graph = Array.from({ length: N + 1 }, () =&amp;gt; []);con..." }, { "title": "1753 최단경로", "url": "/posts/1753/", "categories": "Algorithm, Baekjoon", "tags": "baekjoon, heap, dijkstra", "date": "2021-07-28 11:26:00 +0900", "snippet": "문제 링크: 1753번: 최단경로나의 풀이&quot;use strict&quot;;const readline = require(&quot;readline&quot;);const rl = readline.createInterface({ input: process.stdin, output: process.stdout,});class Heap { constructor() { this.heap = []; } get size() { return this.heap.length; }}class MinHeap exten..." }, { "title": "백준 - 뱀", "url": "/posts/snake/", "categories": "Algorithm, Baekjoon", "tags": "baekjoon, heap, algorithm", "date": "2021-02-11 13:23:00 +0900", "snippet": "뱀문제‘Dummy’ 라는 도스게임이 있다. 이 게임에는 뱀이 나와서 기어다니는데, 사과를 먹으면 뱀 길이가 늘어난다. 뱀이 이리저리 기어다니다가 벽 또는 자기자신의 몸과 부딪히면 게임이 끝난다.게임은 NxN 정사각 보드위에서 진행되고, 몇몇 칸에는 사과가 놓여져 있다. 보드의 상하좌우 끝에 벽이 있다. 게임이 시작할때 뱀은 맨위 맨좌측에 위치하고 뱀의 길이는 1 이다. 뱀은 처음에 오른쪽을 향한다.뱀은 매 초마다 이동을 하는데 다음과 같은 규칙을 따른다. 먼저 뱀은 몸길이를 늘려 머리를 다음칸에 위치시킨다. 만약 이동한 칸..." } ]
